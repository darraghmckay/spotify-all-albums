{"version":3,"sources":["containers/Albums.js","components/Album.js","App.js","index.js"],"names":["token","Album","_ref","album","createdAt","react_default","a","createElement","className","href","external_urls","spotify","target","src","images","url","name","artists","map","artist","index","Fragment","key","uri","URL","concat","document","location","origin","credentials","clientId","redirectUri","spotifyApi","SpotifyWebApi","authorizeUrl","createAuthorizeURL","replace","cookieToken","match","cookie","RegExp","getCookie","Albums","state","albums","_this2","this","includes","setAccessToken","Promise","all","getAlbumsFromTracks","offset","arguments","length","undefined","getMySavedTracks","limit","then","data","body","items","forEach","item","track","id","addedAt","Date","Math","max","added_at","next","console","log","Object","keys","getAlbums","getMySavedAlbums","sortedAlbums","sort","albumId1","albumId2","albumId","setState","components_Album","Component","App","containers_Albums","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.9fc3f00a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport Album from \"../components/Album\";\n\nconst ACCESS_TOKEN_COOKIE = \"spotify:access_token\";\nconst URL = `${document.location.origin}/`;\n\nconst credentials = {\n  clientId: \"ddc2dee973c44bbf8c584dcd0c50e3b7\",\n  redirectUri: URL\n};\n\nconst scopes = [\n  \"streaming\",\n  \"user-read-birthdate\",\n  \"user-read-email\",\n  \"user-read-private\",\n  \"user-library-read\"\n];\nlet player;\nlet token;\nlet playerId;\n\nconst getCookie = name => {\n  const match = document.cookie.match(new RegExp(\"(^| )\" + name + \"=([^;]+)\"));\n  if (match) return match[2];\n};\n\nconst spotifyApi = new SpotifyWebApi(credentials);\n\nconst authorizeUrl = spotifyApi\n  .createAuthorizeURL(scopes)\n  .replace(\"code\", \"token\");\nconst cookieToken = getCookie(ACCESS_TOKEN_COOKIE);\n\nclass Albums extends Component {\n  state = {\n    albums: []\n  };\n\n  componentDidMount() {\n    if (cookieToken || document.location.href.includes(\"access_token\")) {\n      token =\n        cookieToken ||\n        document.location.href.match(\"access_token=([a-zA-Z0-9-_]+)\")[1];\n      spotifyApi.setAccessToken(token);\n\n      if (document.location.href !== URL) {\n        document.location.replace(URL);\n      }\n\n      if (!cookieToken) {\n        document.cookie = `${ACCESS_TOKEN_COOKIE}=${token}; max-age=3600`;\n      }\n\n      const albums = {};\n      const limit = 50;\n      const getAlbumsFromTracks = (offset = 0) =>\n        spotifyApi\n          .getMySavedTracks({ limit: limit, offset: offset })\n          .then(data => {\n            data.body.items.forEach(item => {\n              if (albums[item.track.album.id]) {\n                const addedAt = new Date(\n                  Math.max(\n                    new Date(item.added_at),\n                    albums[item.track.album.id].addedAt\n                  )\n                );\n                albums[item.track.album.id] = {\n                  addedAt: addedAt,\n                  album: item.track.album\n                };\n              } else {\n                albums[item.track.album.id] = {\n                  addedAt: new Date(item.added_at),\n                  album: item.track.album\n                };\n              }\n            });\n\n            if (data.body.next) {\n              return getAlbumsFromTracks(offset + limit);\n            } else {\n              console.log(\n                \"Albums albums track\",\n                Object.keys(albums).length,\n                albums\n              );\n              return;\n            }\n          });\n\n      const getAlbums = (offset = 0) =>\n        spotifyApi\n          .getMySavedAlbums({ limit: limit, offset: offset })\n          .then(data => {\n            data.body.items.forEach(item => {\n              if (albums[item.album.id]) {\n                const addedAt = new Date(\n                  Math.max(\n                    new Date(item.added_at),\n                    albums[item.album.id].addedAt\n                  )\n                );\n\n                albums[item.album.id] = {\n                  addedAt: addedAt,\n                  album: item.album\n                };\n              } else {\n                albums[item.album.id] = {\n                  addedAt: new Date(item.added_at),\n                  album: item.album\n                };\n              }\n            });\n\n            if (data.body.next) {\n              return getAlbums(offset + limit);\n            } else {\n              console.log(\"Albums album\", Object.keys(albums).length, albums);\n              return;\n            }\n          });\n\n      Promise.all([getAlbumsFromTracks(), getAlbums()]).then(() => {\n        console.log(\"All albums gathered\", Object.keys(albums).length, albums);\n        const sortedAlbums = Object.keys(albums)\n          .sort(\n            (albumId1, albumId2) =>\n              albums[albumId2].addedAt - albums[albumId1].addedAt\n          )\n          .map(albumId => albums[albumId]);\n        console.log(sortedAlbums);\n        this.setState({\n          albums: sortedAlbums\n        });\n      });\n    } else {\n      document.location = authorizeUrl;\n    }\n  }\n  render() {\n    const { albums } = this.state;\n    if (albums.length === 0) {\n      return <h1>Loading...</h1>;\n    }\n\n    return (\n      <div>\n        <h1>Albums</h1>\n        <div className=\"album-container\">\n          {albums.map(({ album, addedAt }) => (\n            <Album album={album} addedAt={addedAt} key={album.id} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Albums;\n","import React from \"react\";\n\nconst Album = ({ album, createdAt }) => (\n  <div className=\"album\">\n    <a href={album.external_urls.spotify} target=\"_blank\">\n      <img src={album.images[0].url} />\n    </a>\n    <a href={album.external_urls.spotify} target=\"_blank\">\n      {album.name}\n    </a>\n    <div className=\"artists\">\n      {album.artists.map((artist, index) => (\n        <React.Fragment key={artist.uri}>\n          <a\n            className=\"artist\"\n            href={artist.external_urls.spotify}\n            target=\"_blank\"\n          >\n            {artist.name}\n          </a>\n          {index < album.artists && <span className=\"artist-divider\">,</span>}\n        </React.Fragment>\n      ))}\n    </div>\n  </div>\n);\n\nexport default Album;\n","import React from \"react\";\nimport \"./App.css\";\nimport Albums from \"./containers/Albums\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Albums />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}